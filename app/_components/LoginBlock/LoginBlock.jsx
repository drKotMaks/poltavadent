"use client";

import { useState } from "react";
import { useToast } from "@/components/ui/use-toast";
import { useSubmitForm } from "@/app/hooks/useSubmitForm";
import DoctorInput from "../doctorInput/doctorInput";
import useDoctorStore from "@/app/store/useDoctorStore";
import useStore from "@/app/store/store";
import PriceItemCart from "../PriceItemCart/PriceItemCart";
import { InputPhone } from "../InputPhone/InputPhone";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { setting } from "@/lib/setting";


export default function LoginBlock({ params }) {
    const [service, setService] = useState(""); 
    const { toast } = useToast();
    const { doctor: doc, numberPhone } = useDoctorStore();
    const { selectedPrices } = useStore();
    const [error, setError] = useState(""); // –î–æ–¥–∞—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–º–∏–ª–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    const [lastSubmitTime, setLastSubmitTime] = useState(null); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏
    const [ isLoading, setIsLoading ] = useState(false); // –î–æ–¥–∞—î–º–æ —Å—Ç–∞–Ω –¥–ª—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è

    const handleSubmit = async (event) => {
        event.preventDefault();

        const currentTime = new Date().getTime(); // –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∞—Å –≤—ñ–¥ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        if (lastSubmitTime && currentTime - lastSubmitTime < 6000) { // –Ø–∫—â–æ –ø—Ä–æ–π—à–ª–æ –º–µ–Ω—à–µ 1 —Ö–≤–∏–ª–∏–Ω–∏
            toast({
                title: "–ó–∞—á–µ–∫–∞–π—Ç–µ —Ö–≤–∏–ª–∏–Ω—É",
                description: "–í–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–æ—Ä–º—É –Ω–µ —á–∞—Å—Ç—ñ—à–µ, –Ω—ñ–∂ —Ä–∞–∑ –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É.",
                variant: "destructive"
            });
            return;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ø–æ–º–∏–ª–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
            if (numberPhone.replace(/\D/g, "").length !== 12) {
                toast({
                    title: "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É",
                    description: error.message,
                });
                return;
            } else {
                setError(""); // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ –≤—Å–µ –¥–æ–±—Ä–µ
            }

            const formData = {
                service: selectedPrices || " ",
                doctor: doc || null,
                email: setting.email, // –ú–æ–∂–Ω–∞ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –≤—Ö—ñ–¥–Ω–∏–π email, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                numberPhone
            };

        try {
            setIsLoading(true); // üëà –ø–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
            const response = await fetch('/api/sendEmail', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(formData),
            });

            const data = await response.json();

            

            if (response.ok) {
                    console.log("–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–∏—Ö –≤ n8n? route:", data); 
                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –¥–∞–Ω—ñ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                    const message = Array.isArray(data) ? data[0]?.output : data?.message?.output;
                    //console.log("full", message);


                    toast({
                            title: "–ß–µ–∫–∞–π—Ç–µ –∑–∞ –¥–∑–≤—ñ–Ω–æ–∫ –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                            description: message,
                            className: "bg-blue-500 text-white",
                            duration: 60000, 
            
                        });
                        setService("");
                        setLastSubmitTime(currentTime); // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
                    } else {
                        throw new Error("–ü–æ–º–∏–ª–∫–∞");
                    }
                    } catch (error) {
                        toast({
                            title: "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ",
                            description: error.message,
                            variant: "success"
                        });
                    } finally {
                        setIsLoading(false); // üëà —Å—Ö–æ–≤–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
                    }
                };

    return (
        <form onSubmit={handleSubmit} className="gap-2">
            <div className="flex gap-4 p-1 bg-[#e6fdf3] rounded-[10px]">
                <Avatar>
                    <AvatarImage src="/default-avatar.png" />
                    <AvatarFallback>D</AvatarFallback>
                </Avatar>
                <p>–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –∑–∞–ø–∏—Ç, AI –∑–Ω–∞–π–¥–µ –¥–ª—è –≤–∞—Å —ñ–¥–µ–∞–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç</p>
            </div>
            <div className="gap-2 mt-5 flex flex-col">
                <div className=" gap-2">
                    {doc && <span className="font-bold">–õ—ñ–∫–∞—Ä:</span>}
                    <DoctorInput params={params} />
                </div>
                {selectedPrices.length > 0 && (
                    <div className="gap-2">
                        <span className="font-bold">–û–±—Ä–∞–Ω—ñ –ø–æ—Å–ª—É–≥–∏:</span>
                        {selectedPrices.map((price, index) => (
                            <PriceItemCart key={index} price={price} />
                        ))}
                    </div>
                )}
                <span className="font-bold">–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</span>
                <InputPhone />
            </div>
            {error && <p style={{ color: "red" }}>{error}</p>}
                <Button type="submit" className="btn-primary mt-4" disabled={isLoading}>
                        {isLoading ? "AI —à—É–∫–∞—î –≤—ñ–ª—å–Ω–∏–π —á–∞—Å... ~ 10 —Å–µ–∫" : "–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏..."}
                </Button>
        </form>
    );
}
